---
- name: Setup Homeserver
  hosts: all
  become_method: sudo
  tasks:
  - name: Update packages
    apt:
      update_cache: yes
    become: true
  - name: Install packages
    package:
      name:
        - vim
        - hdparm
        - nvme-cli
        - parted
        - smartmontools
        - pv
        - jq
        - yq
        - dos2unix
        - ncdu
        - p7zip
        - pdftk
        - ffmpeg
        - python3-pip
        - certbot
        - eyed3
        - tmux
        - linux-headers-amd64
        - ca-certificates
        - curl
        - apcupsd
        - exiftool
        - restic
        - tcpdump
        - whois
        - python3-venv
        - whois
        - ntp
    become: true

  - name: Get docker armored signature
    get_url:
      url: https://download.docker.com/linux/debian/gpg
      dest: /etc/apt/keyrings/docker.asc
      mode: a+r
    become: true
  - name: Add docker repository
    apt_repository:
      repo: deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian bookworm stable
      state: present
    become: true
  - name: Install docker
    apt:
      name:
        - docker-ce
        - docker-ce-cli
        - containerd.io
        - docker-buildx-plugin
        - docker-compose-plugin
      update_cache: yes
    become: true
  - name: Configure docker logging
    copy:
      src: docker.daemon.json
      dest: /etc/docker/daemon.json
      mode: '600'
    become: true

  - name: Add backport repository
    apt_repository:
      repo: deb http://deb.debian.org/debian bookworm-backports main contrib
      state: present
    become: true
  - name: Install ZFS from backports
    apt:
      name: zfsutils-linux
      default_release: stable-backports
      update_cache: yes
    become: true

  - name: Install yt-dlp from backports
    apt:
      name: yt-dlp
      default_release: stable-backports
      update_cache: yes
    become: true

  - name: Add contrib repository
    apt_repository:
      repo: deb http://deb.debian.org/debian bookworm main contrib
      state: present
    become: true
  - name: Install zfs-auto-snapshot from backports
    apt:
      name: zfs-auto-snapshot
      #default_release: stable-backports
      update_cache: yes
    become: true

  - name: Disable SSH root login
    lineinfile:
      path: /etc/ssh/sshd_config
      regexp: '^#PermitRootLogin'
      line: 'PermitRootLogin no'
    become: true
  - name: Disable SSH password authentication
    lineinfile:
      path: /etc/ssh/sshd_config
      regexp: '^#PasswordAuthentication yes'
      line: 'PasswordAuthentication no'
    become: true
  - name: Set SSH AuthenticationMethods
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      line: 'AuthenticationMethods publickey'
    become: true

  - name: Generate SSH keypair for GitHub
    openssh_keypair:
      path: /home/bertow/.ssh/id_github
      type: ed25519
  - name: Read pubkey
    slurp:
      src: /home/bertow/.ssh/id_github.pub
    register: pubkey
  - name: Display pubkey
    debug:
      msg:
        - "Add this key to GitHub:"
        - "{{ pubkey['content'] | b64decode | trim }}"
        - "https://github.com/settings/keys"
  - name: Add GitHub pubkey
    lineinfile:
      path: /home/bertow/.ssh/known_hosts
      # source: https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/githubs-ssh-key-fingerprints
      line: '{{ item }}'
      create: true
      mode: '600'
    with_items:
      - 'github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl'
      - 'github.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg='
      - 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk='
  - name: Add authorized SSH keys
    lineinfile:
      path: /home/bertow/.ssh/authorized_keys
      line: '{{ item }}'
      create: true
      mode: '600'
    with_items:
      - 'ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICQy/a/psCEW3O6BFMZqq+aMJpY1Bf1YPPTSJOw8gjyC bertow@asus'
      - 'ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOf7E7DLojJh1ebXBJayAwDMy/yhQsOxUIZtMr/75Qr4 bertow@w500'
      - 'ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBHq4Wcfl53pDZfiXqeQWpNGflyZ1jH/K2A6xpfYKMCPuy7pLP6n1ITIbju3DnCdVie5NU/VyDaF49LNS9mubdd4= iPhone 13 Termius'
      - 'ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILw5SYUyw/B8kgDfAtdXa0umeg0tvBPGoDjIpX7Fswv0 Macbook Work'

  - name: Clone homeserver GitHub repo
    git:
      repo: git@github.com:Benny-Git/homeserver.git
      dest: /home/bertow/homeserver
      update: true
      clone: true
      key_file: /home/bertow/.ssh/id_github

  - name: Add some bash aliases
    lineinfile:
      path: /home/bertow/.bash_aliases
      line: '{{ item }}'
      create: true
      mode: '644'
    with_items:
      - "alias t='tmux new-session -A -s remote'"
      - "alias mp3='youtube-dlc -x --audio-format mp3 --audio-quality 0'"
      - "alias mp3p='youtube-dlc -x --audio-format mp3 --audio-quality 0 -o \"%(playlist_index)s-%(title)s.%(ext)s\" --yes-playlist'"
      - "alias megadl='docker run --rm -v $(pwd):$(pwd)  -w $(pwd) megatools:local dl '"

  - name: Remove default bash history settings
    lineinfile:
      path: /home/bertow/.bashrc
      regexp: '{{ item }}'
      state: absent
    with_items:
      - "^HISTSIZE=.*"
      - "^HISTFILESIZE=.*"

  - name: Add some bash defaults
    lineinfile:
      path: /home/bertow/.bashrc
      line: '{{ item }}'
    with_items:
      - "export VISUAL=vim"
      - "export EDITOR=vim"
      - "shopt -s histappend"
      - "HISTFILESIZE=1000000"
      - "HISTSIZE=1000000"
      - "HISTCONTROL=ignoreboth"
      - "HISTIGNORE='ls:bg:fg:history'"
      - "HISTTIMEFORMAT='%F %T '"
      - "shopt -s cmdhist"
      - "PROMPT_COMMAND='history -a'"
      - "function toh264() { ffmpeg -i $1 -c:v libx264 -c:s copy $1.h264.mkv ; }"

  - name: Add vim defaults
    lineinfile:
      path: /home/bertow/.vimrc
      line: '{{ item }}'
      create: true
      mode: '644'
    with_items:
      - "set shiftwidth=2"
      - "set cursorline"
      - "set autoindent"
      - "syntax on"
      - "colorscheme koehler"

  - name: Check if Dropbox is already installed
    stat:
      path: /home/bertow/.dropbox-dist
    register: dropbox
  - name: Download Dropbox
    get_url:
      url: 'https://www.dropbox.com/download?plat=lnx.x86_64'
      dest: /tmp/dropbox-linux.tar.gz
    when: not dropbox.stat.exists
  - name: Install Dropbox
    unarchive:
      remote_src: true
      src: /tmp/dropbox-linux.tar.gz
      dest: /home/bertow
    when: not dropbox.stat.exists
  - name: Link Dropbox directoy
    file:
      state: link
      src: /dozer/misc/Dropbox
      path: /home/bertow/Dropbox
  - name: Prompt to link Dropbox
    pause:
      prompt: Link Dropbox by running /opt/dropbox/dropboxd -- Press return to continue. Press Ctrl+c and then "a" to abort
    when: not dropbox.stat.exists
  - name: Create Dropbox service
    copy:
      dest: /etc/systemd/system/dropbox.service
      content: |
        [Unit]
        Description=Dropbox Daemon
        After=network.target
        
        [Service]
        Type=simple
        User=bertow
        ExecStart=/home/bertow/.dropbox-dist/dropboxd
        ExecStop=/bin/kill -HUP $MAINPID
        Restart=always
        
        [Install]
        WantedBy=multi-user.target
    become: true
  - name: Enable and start Dropbox service
    systemd_service:
      name: dropbox
      state: started
      daemon_reload: true
      enabled: true
    become: true
  - name: Download Dropbox CLI tool
    get_url:
      url: 'https://www.dropbox.com/download?dl=packages/dropbox.py'
      dest: /home/bertow/.dropbox-dist/dropbox.py
      mode: '755'
  - name: Link Dropbox CLI tool to /usr/bin
    file:
      state: link
      src: /home/bertow/.dropbox-dist/dropbox.py
      path: /usr/bin/dropbox
    become: true


  - name: Create crontab entry to remove unused docker containers, networks and images
    cron:
      name: docker prune
      job: /usr/bin/docker system prune -f
      minute: 0
      hour: 3
    become: true
  - name: Create crontab entry to create daily powermeter report
    cron:
      name: powermeter
      job: /dozer/docker/influxdb/daily_report.sh
      minute: 0
      hour: 0
    become: true
  - name: Create crontab entry to create daily paperless export
    cron:
      name: paperless export
      job: /dozer/docker/paperlessngx/trigger_export.sh
      minute: 30
      hour: 0
    become: true
  - name: Create crontab entry to cleanup home assistant backups
    cron:
      name: ha backup cleanup
      job: /dozer/docker/homeassistant/backups/cleanup_ha_backups.sh
      minute: 30
      hour: 1
    become: true
  - name: Create crontab entry to trigger mealie backups
    cron:
      name: mealie backups
      job: /dozer/docker/mealie/backups/backup.sh
      minute: 30
      hour: 1
    become: true
  - name: Create crontab entry to create webtrees backups
    cron:
      name: webtrees backups
      job: /dozer/docker/webtrees/mariadb_backup.sh
      minute: 30
      hour: 1
    become: true

  - name: Configure APC UPS daemon 1/2
    lineinfile: 
      path: /etc/apcupsd/apcupsd.conf
      line: UPSTYPE usb
      regexp: '^UPSTYPE.*'
    become: true
    register: apc1
  - name: Configure APC UPS daemon 2/2
    lineinfile:
      path: /etc/apcupsd/apcupsd.conf
      line: DEVICE
      regexp: '^DEVICE.+'
    become: true
    register: apc2
  - name: Restart APC UPS daemon service
    systemd_service:
      name: apcupsd
      state: restarted
      enabled: true
    become: true
    when: (apc1 is changed) or (apc2 is changed)
  - name: Gather apcaccess output
    command: apcaccess
    become: true
    register: apcaccess
    changed_when: false
  - name: Output apcaccess stdout
    debug:
      msg: '{{ apcaccess.stdout_lines }}'

  - name: Configure eno3
    copy:
      dest: /etc/network/interfaces.d/eno3
      content: |
        # Configure our tertiary network interface
        # to use dhcp
        # try to fix bug https://github.com/Benny-Git/homeserver/issues/39
        # allow-hotplug eno3
        auto eno3
        iface eno3 inet dhcp
    become: true

  - name: Configure zed notifications in ntfy 1/3
    lineinfile:
      path: /etc/zfs/zed.d/zed.rc
      line: ZED_NTFY_TOPIC=zfs
      regexp: '^#?ZED_NTFY_TOPIC.+'
    become: true
    register: zed1
  - name: Configure zed notifications in ntfy 2/3
    lineinfile:
      path: /etc/zfs/zed.d/zed.rc
      line: ZED_NTFY_URL="https://ntfy.i.bertow.com"
      regexp: '^#?ZED_NTFY_URL.+'
    become: true
    register: zed2
  - name: Configure zed notifications in ntfy 3/3
    lineinfile:
      path: /etc/zfs/zed.d/zed.rc
      line: ZED_NOTIFY_VERBOSE=1
      regexp: '^#?ZED_NOTIFY_VERBOSE.+'
    become: true
    register: zed3
  - name: Restart zed service
    systemd_service:
      name: zed
      state: restarted
      enabled: true
    become: true
    when: (zed1 is changed) or (zed2 is changed) or (zed3 is changed)

  - name: Update restic
    command: /usr/bin/restic self-update
    become: true
    register: restic_update
    changed_when: '"successfully updated restic to version" in restic_update.stdout'

  - name: Check if resticprofile is already installed
    stat:
      path: /usr/local/bin/resticprofile
    register: resticprofile
  - name: Download resticprofile
    get_url:
      url: 'https://github.com/creativeprojects/resticprofile/releases/download/v0.29.0/resticprofile_0.29.0_linux_amd64.tar.gz'
      dest: /tmp/resticprofile.tar.gz
    when: not resticprofile.stat.exists
  - name: Install resticprofile
    unarchive:
      remote_src: true
      src: /tmp/resticprofile.tar.gz
      dest: /usr/local/bin
      include:
        - resticprofile
    when: not resticprofile.stat.exists
    become: true
  - name: Update resticprofile
    command: /usr/local/bin/resticprofile self-update --quiet
    become: true
    register: resticprofile_update
    changed_when: '"Successfully updated to version" in resticprofile_update.stdout'
  - name: Link resticprofile profiles.yaml
    file:
      state: link
      src: /home/bertow/homeserver/ansible/files/profiles.yaml
      path: /home/bertow/profiles.yaml
  - name: Create systemd backup schedules
    command: /usr/local/bin/resticprofile schedule --all

  - name: Configure ntp servers
    become: true
    lineinfile:
      path: /etc/ntpsec/ntp.conf
      line: '{{ item }}'
    with_items:
      - pool 0.de.pool.ntp.org iburst
      - pool 1.de.pool.ntp.org iburst
      - pool 2.de.pool.ntp.org iburst
      - pool 3.de.pool.ntp.org iburst

  - name: Configure ntp listen
    become: true
    lineinfile:
      path: /etc/ntpsec/ntp.conf
      line: '{{ item }}'
    with_items:
      - interface listen ipv4

  - name: Restart ntpd
    systemd_service:
      name: ntpsec
      state: restarted
      enabled: true
    become: true

